## **StateMachine.h**

**Purpose:**
Defines a class for managing system states and transitions between them based on events.

### Key Components:
1. **Enums:**
   - `State`: Represents operational states such as `STATE_IDLE`, `STATE_SWINGING`, etc.
   - `Event`: Represents external triggers like button presses or sensor changes.
   - `Speed`: Represents motor speed levels (`SPEED_LOW`, `SPEED_MEDIUM`, etc.).

2. **Public Methods:**
   - `StateMachine()`: Constructor initialises state machine variables.
   - `void begin()`: Prepares state machine for operation.
   - `void processEvent(Event event)`: Handles events and transitions between states.
   - `State getCurrentState() const`: Returns current state.
   - `Speed getCurrentSpeed() const`: Returns current motor speed setting.
   - `const char* getStateString() const`: Returns a string representation of current state.
   - `const char* getSpeedString() const`: Returns a string representation of current speed level.

3. **Private Methods:**
   - `void transition(State newState)`: Changes state and performs entry/exit actions.
   - `void enterState(State state)`: Executes actions upon entering a new state.
   - `void exitState(State state)`: Executes actions upon exiting a state.
